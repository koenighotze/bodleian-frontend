name: Build main or features

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  id-token: write

jobs:
  qa:
    runs-on: ubuntu-20.04

    steps:
      - name: Checking out
        uses: actions/checkout@v3
      - name: Set up Node.js
        uses: actions/setup-node@v3.4.1
        with:
          node-version: '14.x'
      - name: Install dependencies
        run: npm ci
      - name: Scaning code
        uses: aquasecurity/trivy-action@0.2.4
        with:
          scan-type: "fs"
          ignore-unfixed: true
          format: "table"
          template: "@/contrib/sarif.tpl"
          severity: "MEDIUM,HIGH,CRITICAL"
      - name: Linting
        run: npm run lint
      - name: Detecting secrets
        uses: reviewdog/action-detect-secrets@v0.8
        with:
          reporter: github-check
          github_token: ${{ secrets.github_token }}
          fail_on_error: true
          detect_secrets_flags: --exclude-files .git

  test:
    runs-on: ubuntu-20.04

    steps:
      - name: Checking out
        uses: actions/checkout@v3
      - name: Set up Node.js
        uses: actions/setup-node@v3.4.1
        with:
          node-version: '14.x'
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Testing
        run: npm t

      # - name: Uploading coverage
      #   uses: codacy/codacy-coverage-reporter-action@v1
      #   with:
      #     api-token: ${{ secrets.CODACY_API_TOKEN }}
      #     coverage-reports: ./coverage/lcov.info
      #   env:
      #     CODACY_PROJECT_NAME: "bodleian-frontend"
      #     CODACY_ORGANIZATION_PROVIDER: "gh"
      #     CODACY_USERNAME: "${{ github.repository_owner }}"

  build-container:
    needs:
      - qa
      - test
    runs-on: ubuntu-20.04

    steps:
      - name: Checking out
        uses: actions/checkout@v3
      - name: Authenticating
        uses: google-github-actions/auth@v0.7.0
        with:
          workload_identity_provider: ${{ secrets.WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.CICD_SA_EMAIL_ADDRESS }}
          # token_format: "access_token"
      - name: Setting up GCP environment
        uses: google-github-actions/setup-gcloud@v0.6.0
      - name: Containerizing
        id: containerizing
        run: ./scripts/containerize.sh
        env:
          CONTAINER_REGISTRY: ${{ secrets.CONTAINER_REGISTRY }}
          GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
      - name: Scaning image tar
        uses: aquasecurity/trivy-action@0.2.4
        with:
          image-ref: "${{ github.event.inputs.image-name || steps.containerizing.outputs.image-name }}"
          format: "table"
          exit-code: "1"
          ignore-unfixed: true
          severity: "MEDIUM,HIGH,CRITICAL"
          vuln-type: "os,library"